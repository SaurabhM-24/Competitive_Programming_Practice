Disjoint Sets
(DSU - Disjoint Set Union / Union-Find Algorithm)

    Operations - 
        1 - combine two sets
        2 - check if 2 members belong from same set

    Example -
    Take the set
            a b c d e f g h
    
    initially, all the elements are independent -> each element is parent of itself.

    elements -  a b c d e f g h
    parents -   a b c d e f g h

    Then, we perform union on this first two elements and make one of them the parent of both.

    element - (a b) c d e f g h
    parents -  a a  c d e f g h  internally now b->a

    similarly, we will do with all independent pairs

    element - (a b) (c d) (e f) (g h)
    parents -  a a   c c   e e   g g       internally, b->a   d->c   f->e   h->g

    We willl perform the same operation again, to combine first two pairs

    elements - a b c d e f g h
    parents -  a a a c e e g g        internally b -> a <- c <- d     e <- f    g <- h

    next, we can combine first set and the second set.

    elements - a b c d e f g h
    parents -  e a a c e e g g        internally e <- f             g <- h
                                                 ^
                                                 |
                                            b -> a <- c <- d

    next, we combine the final two disjoint sets.

    elements - a b c d e f g h
    parents -  e a a c g e g g        internally f -> e -> g <- h
                                                      ^
                                                      |
                                                 b -> a <- c <- d


    
    next, we can create the find function to find if two members belong to the same set.

    E.g. if we execute find(c),
        it will recursively check for parent of c in parent vector
        c's parent is a
        a's parent is e
        e's parent is g
        g's parent is g - we stop

        then we can execute find(e),
        e's parent is g
        g's parent is g - we stop

        since, parent of c = parent of e, they belong to the same set.
    

Pseudo Code

    int find(int i, vector<int> parent) {

        if(i == parent[i])
            return i
        
        return find(parent[i])
    }

    // for a better graph construction with better search compelxity, we can use the following in find function - 
    //          return parent[i] = find(parent[i], parent);

    void union(int x, int y, vector<int>parent) {

        int x_parent = find(x, parent)
        int y_parent = find(y, parent)

        if(x_parent != y_parent)
            parent[x_parent] = y_parent
    }


Rank of DSU

    Initially, we assign rank 0 to all the elements.

    rank -      0 0 0 0 0 0
    elements -  0 1 2 3 4 5
    parent -    0 1 2 3 4 5

    next, when we perform union operation on two elements, we will increase the rank of the parent by 1

    rank -      1 0 0 0 0 0
    elements -  0 1 2 3 4 5
    parent -    0 0 2 3 4 5

    
    we can repeat this procedure for every pair elements

    rank -      1 0 1 0 1 0
    elements -  0 1 2 3 4 5
    parent -    0 0 2 2 4 4


    or be can combine first pair with third element, increasing the parent's children

    rank -      1 0 0 0 0 0
    elements -  0 1 2 3 4 5
    parent -    0 0 0 3 4 5

    and, we can continue this to make 0 be the parent of everything

    rank -      1 0 0 0 0 0
    elements -  0 1 2 3 4 5
    parent -    0 0 0 0 0 0


Pseudo code -

    void union(int x, int y, &parent, &rank) {

        int x_parent = find(x, &parent)
        int y_parent = find(y, &parent)

        if(x_parent == y_parent)
            return;
        
        if( rank(x_parent) > rank(y_parent) )
            parent[y_parent] = x_parent
        else if( rank(y_parent) > rank(x_parent) )
            parent[x_parent] = y_parent
        else {
            parent[x_parent] = y_parent
            rank[y_parent] += 1
        }
    }